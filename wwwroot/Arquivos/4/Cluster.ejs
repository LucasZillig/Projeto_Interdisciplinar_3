<div class="training">
    <a href="/clusters" class="go-back">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/></svg>
        <p>Voltar</p>
    </a>
    <button class="histrogram-button">Histrograma</button>
    <h1><%= cluster.name %></h1>
    <div class="tag-cloud-wrapper">
        <div class="pages">
            <span id="good-button">Palavras Novas</span>
            <span id="bad-button">Palavras Deletadas</span>
        </div>
        <div class="tag-cloud" id="good-words-cloud">
            <button id="searchWordsBtn" class="search-words">
                <p>Procurar novas palavras</p>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
            </button>
        </div>
        <div class="tag-cloud" id="bad-words-cloud" style="display: none;">
        </div>
    </div>
    <div class="buttons-area">  
        <button onclick="deleteCluster()">Excluir cluster</button>
        <button onclick="setWordsAndJks()">Salvar</button>
    </div>
    <div class="histogram-wrapper">
        <svg onclick="closeHistogram()" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
        <canvas id="myChart"></canvas>
    </div>
</div>

<script type="text/javascript" src="/lib/jquery-3.4.1.min.js"></script>
<script type="text/javascript" src="/lib/Chart.min.js"></script>
<script type="text/javascript">
    "use strict";

    let jks, goodWords, badWords = [];

    $('#searchWordsBtn').click(function(){
        $('#searchWordsBtn').remove();
        showLoading();

        getWordsAndJks()
        .then(response => {
            $('.loading-wrapper').remove();
            jks = response.jks;
            goodWords = response.words;
            for(const word in goodWords){
                const wordObj = goodWords[word];
                if(!wordObj.exists)
                    createWordSpan(word, wordObj);
            }
        })
        .catch(err => console.error(err));
    });

    async function getWordsAndJks() {
        const cluster_name = '<%= cluster.name %>';
        const cluster_id = '<%= cluster._id %>'

        const response = await fetch(`/Words?cluster=${cluster_name}&id=${cluster_id}`);
        const data = await response.json();

        return data;
    }

    async function setWordsAndJks() {
        const cluster = '<%= cluster._id %>';
        const jobData = {
            jks,
            cluster
        }
        const wordsData = {
            cluster,
            goodWords,
            badWords
        }
        console.log('Atualizando vagas...')
        await fetch('/Jobs', {
            method: 'PUT',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify(jobData)
        })
            .then(response => { return response })
            .catch(err => { throw err });
        console.log('Vagas atualizadas!')
        console.log('Atualizando palavras...')
        await fetch('/Words', {
            method: 'POST',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify(wordsData)

        })
            .then(response => { return response })
            .catch(err => { throw err });
        console.log('Palavras Atualizadas!')
    }

    function createWordSpan(hash, word){
        if(!word.exists){
            $('#good-words-cloud').append(`
                <span id="span-${ hash }">
                    <svg onclick="deleteWord('${word.name}', ${hash})"xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"/><path d="M0 0h24v24H0z" fill="none"/></svg>          
                    <p>${ word.name }</p>
                </span>
            `);
        }
    }

    function deleteWord(word, hash){
        console.log(word);
        $('#span-' + hash).remove();
        badWords.push(word);
        delete goodWords[hash];
    }

    async function deleteCluster(cluster) {
        const response = await fetch('/Cluster/<%= cluster._id %>', {
            method: 'Delete'
        });

        const data = await response.json();

        window.location.replace('/Clusters');
    }

    $('.pages span').click(function(){
        $('.pages span').css('background-color', '#bbbbbd');
        if($(this).attr('id') == 'good-button'){
            $(this).css('background-color', '#F7F7FF');
            $('#good-words-cloud').show();
            $('#bad-words-cloud').hide();
        }else{
            $(this).css('background-color', '#F7F7FF');
            $('#good-words-cloud').hide();
            $('#bad-words-cloud').show();
        }
    })

    function showLoading(){
        $('.tag-cloud').append(`
            <div class="loading-wrapper">
                <div class="circles-wrapper">
                    <div id="circle" class="circle"></div>
                    <div id="circle-1" class="circle"></div>
                    <div id="circle-2" class="circle"></div>
                </div>
                <p> Carregando dados</p>
            </div>
        `);

        const circles = ['circle','circle-1','circle-2'];

        let option = 0;

        
        setInterval(() => {
            if($('.loading-wrapper').length){
                document.getElementById(circles[0]).style.backgroundColor = 'transparent';
                document.getElementById(circles[1]).style.backgroundColor = 'transparent';
                document.getElementById(circles[2]).style.backgroundColor = 'transparent';
                
                document.getElementById(circles[option]).style.backgroundColor = '#C62E65';
                
                option++;
                
                if(option > 2){ 
                    option = 0;
                }
            }else {
                return;
            }
        }, 500);
    }

    $('.histrogram-button').click(function(){
        $('.histogram-wrapper').show();
    });

    function closeHistogram(){
        $('.histogram-wrapper').hide();
    }

    async function getHistogramInformation(){
        const response = await fetch('/Histogram?cluster=<%= cluster._id %>');
        const data = response.json();

        return data;
    }

    let labels = [];
    let dataCounter = [];

    getHistogramInformation()
        .then(response => {
            for(const word of response){
                labels.push(word.name);
                dataCounter.push(word.counter);
            }

            var ctx = document.getElementById('myChart').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Numero de aparições',
                        data: dataCounter,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                callback: function (value) { if (Number.isInteger(value)) { return value; } },
                                stepSize: 1
                            }
                        }]
                    }
                }
            });
        })
        .catch(err => console.error(err));
</script>