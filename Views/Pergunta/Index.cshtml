@{
    Layout = "~/Views/Shared/_LayoutPergunta.cshtml";
}
<div class="header-wrapper">
    <div class="header">
        <div class="header-left">

        </div>
        <div class="header-center">
            <div class="question-header">
                <button class="mdc-icon-button material-icons header-icon-button" style="left: 16px" id="mobile-sidebar-button">chevron_left</button>
                <button class="mdc-icon-button material-icons header-icon-button" style="right: 16px" id="mobile-sidebar-button">archive</button>
            </div>
        </div>
        <div class="header-right">

        </div>
    </div>
</div>
<div class="content-wrapper" style="top: 48px; overflow-x: hidden;">
    <div class="content-container">
        <div class="question-content-header">
            <div class="question-title">@ViewBag.Pergunta.PerguntaNome</div>
            <div class="question-info">
                <div class="question-info-left">
                    <img class="account-picture" src="/img/porter.jpg">
                    </span>
                </div>
                <div class="question-info-right">
                    <div class="question-info-header">
                        <div class="question-sender">@ViewBag.Pergunta.CursoAluno.Aluno.Usuario.UsuarioNome</div>
                    </div>
                    <div class="question-subject">@ViewBag.Pergunta.CursoAluno.Curso.CursoNome</div>
                </div>
            </div>
        </div>
        <div class="editor">
            <div class="container-wrapper">
                <div id="container"></div>
            </div>
        </div>
        <div class="mdc-tab-bar" role="tablist" style="-webkit-box-shadow: 0 1px 1px 0 rgba(65, 69, 73, 0.3), 0 1px 3px 1px rgba(65, 69, 73, 0.15);box-shadow: 0 1px 1px 0 rgba(65, 69, 73, 0.3), 0 1px 3px 1px rgba(65, 69, 73, 0.15);">
            <div class="mdc-tab-scroller">
                <div class="mdc-tab-scroller__scroll-area">
                    <div class="mdc-tab-scroller__scroll-content">
                        <button class="mdc-tab mdc-tab--active" role="tab" aria-selected="true" tabindex="0" id="description-tab" onclick="changeTab(this)">
                            <span class="mdc-tab__content">
                                <span class="mdc-tab__icon material-icons" aria-hidden="true">subtitles</span>
                                <span class="mdc-tab__text-label">Descrição</span>
                            </span>
                            <span class="mdc-tab-indicator mdc-tab-indicator--active">
                                <span class="mdc-tab-indicator__content mdc-tab-indicator__content--underline"></span>
                            </span>
                            <span class="mdc-tab__ripple"></span>
                        </button>
                        <button class="mdc-tab" role="tab" aria-selected="true" tabindex="0" id="comment-tab" onclick="changeTab(this)">
                            <span class="mdc-tab__content">
                                <span class="mdc-tab__icon material-icons" aria-hidden="true">comment</span>
                                <span class="mdc-tab__text-label">Escrever</span>
                            </span>
                            <span class="mdc-tab-indicator">
                                <span class="mdc-tab-indicator__content mdc-tab-indicator__content--underline"></span>
                            </span>
                            <span class="mdc-tab__ripple"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="tabs-content">
            <div class="question-description-container tab-ativa">
                <div class="question-description">
                    <div class="question-description-header">
                        <div class="qdh-info">
                            <div class="qdh-user">@ViewBag.Pergunta.CursoAluno.Aluno.Usuario.UsuarioNome</div>
                            <div class="qdh-time">@ViewBag.Pergunta.PerguntaData</div>
                        </div>
                    </div>
                    <div class="question-description-content">
                        @ViewBag.Pergunta.PerguntaDesc
                    </div>
                </div>
            </div>
            <div class="question-write" style="width:100%;">
                <form id="comment-form">
                    <div class="mdc-text-field mdc-text-field--textarea" style="margin-top: 20px; width: 100%;">
                        <textarea class="mdc-text-field__input" rows="8" cols="40"></textarea>
                        <div class="mdc-notched-outline">
                            <div class="mdc-notched-outline__leading"></div>
                            <div class="mdc-notched-outline__notch">
                            <label for="textarea" class="mdc-floating-label"><b>Escreva</b></label>
                            </div>
                            <div class="mdc-notched-outline__trailing"></div>
                        </div>
                    </div>
                    <button type="submit" class="mdc-button mdc-button--outlined mdc-ripple-upgraded" style="width:100%;margin-top: 20px;">
                        <span class="mdc-button__label">Responder</span>
                    </button>
                </form>
            </div>
        </div>
        <div class="comment-section">
            <div class="comment-list">
                @if ((ViewBag.Pergunta.Comentarios).Count > 0) 
                {
                    @foreach (Comentario c in ViewBag.Pergunta.Comentarios){
                    <div class="comment-section">
                        <div class="comment-list">
                            <div class="question-comment">
                                <div class="question-comment-header">
                                    <img class="account-picture" src="/img/porter.jpg">
                                    <div class="question-comment-info">
                                        <div class="question-comment-user">@c.Pergunta.CursoAluno.Aluno.Usuario.UsuarioNome</div>
                                        <div class="question-comment-time">@c.ComentarioData</div>
                                    </div>
                                </div>
                                <div class="question-comment-content">
                                    @c.ComentarioConteudo
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                } 
            </div>
        </div>
    </div>
</div>

@section Scripts {
    
<script>var require = { paths: { 'vs': '/lib/vs'} };</script>
<script src="~/lib/vs/loader.js"></script>
<script src="~/lib/vs/editor/editor.main.nls.js"></script>
<script src="~/lib/vs/editor/editor.main.js"></script>
<script type="module" src="~/lib/pell/pell.js">
    const pell = window.pell;
    import { exec, init } from 'pell'

    const editor2 = init({
        element: document.getElementById('editor'),
        onChange: html => {
            document.getElementById('html-output').textContent = html
        },
        defaultParagraphSeparator: 'p',
        styleWithCSS: true,
        actions: [
            'bold',
            'underline',
            {
            name: 'italic',
            result: () => exec('italic')
            },
            {
            name: 'backColor',
            icon: '<div style="background-color:pink;">A</div>',
            title: 'Highlight Color',
            result: () => exec('backColor', 'pink')
            },
            {
            name: 'image',
            result: () => {
                const url = window.prompt('Enter the image URL')
                if (url) exec('insertImage', url)
            }
            },
            {
            name: 'link',
            result: () => {
                const url = window.prompt('Enter the link URL')
                if (url) exec('createLink', url)
            }
            }
        ],
        classes: {
            actionbar: 'pell-actionbar-custom-name',
            button: 'pell-button-custom-name',
            content: 'pell-content-custom-name',
            selected: 'pell-button-selected-custom-name'
        }
        })
        
        editor2.content.innerHTML = '<b><u><i>Initial content!</i></u></b>';

</script>

<script>
    var originalModel = monaco.editor.createModel("zap", "javascript");
    var modifiedModel = monaco.editor.createModel("zap2", "javascript");
    var editor = monaco.editor.createDiffEditor(document.getElementById('container'), {
        language: 'javascript',
        theme: "vs-dark",
        automaticLayout: true,
        scrollbar: {
            verticalHasArrows: true,
            horizontalHasArrows: true,
            vertical: 'visible',
            horizontal: 'visible',
            verticalScrollbarSize: 17,
            horizontalScrollbarSize: 17,
            arrowSize: 30
        }
    });
    editor.setModel({
        original: originalModel,
        modified: modifiedModel
    });
</script>

<script>
    $(document).ready(function (){
            var descHeight = $('.question-description-content').prop('scrollHeight');
            var maxHeight = $('.question-description-content').css('max-height').substr(0,2);
            if(descHeight <= maxHeight){
                $('#mostrar-button').remove();
            }
            else{
                $('.question-description-container').append('<button class="mdc-button" onclick="toggleDescricao()" style="margin: auto; margin-top: 8px;"><span class="mdc-button__label" id="mostrar-button">Mostrar Mais</span></button>');
            }
    });
    var descOpen = false;
    
    function toggleDescricao(){
        var descHeight = $('.question-description-content').prop('scrollHeight');
        var maxHeight = $('.question-description-content').css('maxheight');

            if(descOpen == false){
                $('.question-description-content').css("max-height", descHeight + "px");
                $('#mostrar-button').html("Mostrar Menos");
                descOpen = true;
            }
            else{
                $('.question-description-content').css("max-height", "");
                $('#mostrar-button').html("Mostrar Mais");
                descOpen = false;
            }
    }

    function changeTab(botao){
        if($('.question-description-container').hasClass('tab-ativa') && $(botao).is('#comment-tab')){
            $('.question-description-container').removeClass('tab-ativa').clearQueue().fadeOut(300, function(){
                $('.question-write').clearQueue().addClass('tab-ativa').fadeIn(300);
            });
        }
        else if($('.question-write').hasClass('tab-ativa') && $(botao).is('#description-tab')){
            $('.question-write').removeClass('tab-ativa').clearQueue().fadeOut(300, function(){
                $('.question-description-container').clearQueue().addClass('tab-ativa').fadeIn(300);
            });
        }
        else{
        }
    }

</script>

<script>
        const tabBars = document.querySelectorAll('.mdc-tab-bar');
        for (const tabBar of tabBars){
            mdc.tabBar.MDCTabBar.attachTo(tabBar);
        }

        const radios = document.querySelectorAll('.mdc-radio');
        for (const radio of radios){
            mdc.radio.MDCRadio.attachTo(radio);
        }

        const dialogs = document.querySelectorAll('.mdc-dialog');
        for (const dialog of dialogs){
            mdc.dialog.MDCDialog.attachTo(dialog);
        }

        const textFields = document.querySelectorAll('.mdc-text-field');
        for (const textField of textFields) {
            mdc.textField.MDCTextField.attachTo(textField);
        }

        const selects = document.querySelectorAll('.mdc-select');
        for (const select of selects) {
            mdc.select.MDCSelect.attachTo(select);
        }

        const buttons = document.querySelectorAll('.mdc-button');
        for (const button of buttons) {
            mdc.ripple.MDCRipple.attachTo(button);
        }

        const lists = document.querySelectorAll('.mdc-list');
        const listItems = document.querySelectorAll('.mdc-list-item');
        for (const list of lists) {
            mdc.list.MDCList.attachTo(list);
            for (const listItem of listItems){
                mdc.ripple.MDCRipple.attachTo(listItem);
            }
        }

        $('#mobile-sidebar-button').click(() => {
            location.href= "/"
        })
</script>
}