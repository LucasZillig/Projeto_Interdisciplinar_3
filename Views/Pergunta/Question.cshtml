@{
    Layout = "~/Views/Shared/_LayoutPergunta.cshtml";
}
<div class="header-wrapper">
    <div class="header">
        <div class="header-left">

        </div>
        <div class="header-center">
            <div class="question-header">
                <button class="mdc-icon-button material-icons header-icon-button" style="left: 16px" id="mobile-sidebar-button">chevron_left</button>
                <button class="mdc-icon-button material-icons header-icon-button" style="right: 16px" id="mobile-sidebar-button">archive</button>
            </div>
        </div>
        <div class="header-right">

        </div>
    </div>
</div>
<div class="content-wrapper" style="top: 48px; overflow-x: hidden;">
    <div class="content-container">
        <div class="question-content-header">
            <div class="question-title">Título da Pergunta</div>
            <div class="question-info">
                    <div class="question-info-left">
                        <img class="account-picture" src="/img/porter.jpg">
                        </span>
                    </div>
                    <div class="question-info-right">
                        <div class="question-info-header">
                            <div class="question-sender">Rafael Mira Pignataro</div>
                            <div class="question-time">2019-11-20</div>
                        </div>
                        <div class="question-subject">Matéria aqui</div>
                    </div>
            </div>
        </div>
        <div class="editor">
            <div class="container-wrapper">
                <div id="container"></div>
            </div>
        </div>
        <div class="mdc-tab-bar" role="tablist" style="margin-bottom: 500px">
            <div class="mdc-tab-scroller">
                <div class="mdc-tab-scroller__scroll-area">
                    <div class="mdc-tab-scroller__scroll-content">
                        <button class="mdc-tab mdc-tab--active" role="tab" aria-selected="true" tabindex="0">
                            <span class="mdc-tab__content">
                                <span class="mdc-tab__icon material-icons" aria-hidden="true">subtitles</span>
                                <span class="mdc-tab__text-label">Descrição</span>
                            </span>
                            <span class="mdc-tab-indicator mdc-tab-indicator--active">
                                <span class="mdc-tab-indicator__content mdc-tab-indicator__content--underline"></span>
                            </span>
                            <span class="mdc-tab__ripple"></span>
                        </button>
                        <button class="mdc-tab" role="tab" aria-selected="true" tabindex="0">
                            <span class="mdc-tab__content">
                                <span class="mdc-tab__icon material-icons" aria-hidden="true">comment</span>
                                <span class="mdc-tab__text-label">Escrever</span>
                            </span>
                            <span class="mdc-tab-indicator">
                                <span class="mdc-tab-indicator__content mdc-tab-indicator__content--underline"></span>
                            </span>
                            <span class="mdc-tab__ripple"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    
<script>var require = { paths: { 'vs': '/lib/vs' } };</script>
<script src="~/lib/vs/loader.js"></script>
<script src="~/lib/vs/editor/editor.main.nls.js"></script>
<script src="~/lib/vs/editor/editor.main.js"></script>
<script src="~/lib/pell/pell.js"></script>
<script>
    var originalModel = monaco.editor.createModel("zap", "javascript");
    var modifiedModel = monaco.editor.createModel("zap2", "javascript");
    var editor = monaco.editor.createDiffEditor(document.getElementById('container'), {
        language: 'javascript',
        theme: "vs-dark",
        automaticLayout: true,
        scrollbar: {
            verticalHasArrows: true,
            horizontalHasArrows: true,
            vertical: 'visible',
            horizontal: 'visible',
            verticalScrollbarSize: 17,
            horizontalScrollbarSize: 17,
            arrowSize: 30
        }
    });
    editor.setModel({
        original: originalModel,
        modified: modifiedModel
    });
</script>
<script>
    pell.init({
    // <HTMLElement>, required
    element: document.getElementById('some-id'),

    // <Function>, required
    // Use the output html, triggered by element's `oninput` event
    onChange: html => console.log(html),

    // <string>, optional, default = 'div'
    // Instructs the editor which element to inject via the return key
    defaultParagraphSeparator: 'div',

    // <boolean>, optional, default = false
    // Outputs <span style="font-weight: bold;"></span> instead of <b></b>
    styleWithCSS: false,

    // <Array[string | Object]>, string if overwriting, object if customizing/creating
    // action.name<string> (only required if overwriting)
    // action.icon<string> (optional if overwriting, required if custom action)
    // action.title<string> (optional)
    // action.result<Function> (required)
    // Specify the actions you specifically want (in order)
    actions: [
        'bold',
        {
        name: 'custom',
        icon: 'C',
        title: 'Custom Action',
        result: () => console.log('Do something!')
        },
        'underline'
    ],

    // classes<Array[string]> (optional)
    // Choose your custom class names
    classes: {
        actionbar: 'pell-actionbar',
        button: 'pell-button',
        content: 'pell-content',
        selected: 'pell-button-selected'
    }
    })

    // Execute a document command, see reference:
    // https://developer.mozilla.org/en/docs/Web/API/Document/execCommand
    // this is just `document.execCommand(command, false, value)`
    pell.exec(command<string>, value<string>);
</script>
<script>
        const tabBars = document.querySelectorAll('.mdc-tab-bar');
        for (const tabBar of tabBars){
            mdc.tabBar.MDCTabBar.attachTo(tabBar);
        }

        const radios = document.querySelectorAll('.mdc-radio');
        for (const radio of radios){
            mdc.radio.MDCRadio.attachTo(radio);
        }

        const dialogs = document.querySelectorAll('.mdc-dialog');
        for (const dialog of dialogs){
            mdc.dialog.MDCDialog.attachTo(dialog);
        }

        const textFields = document.querySelectorAll('.mdc-text-field');
        for (const textField of textFields) {
            mdc.textField.MDCTextField.attachTo(textField);
        }

        const selects = document.querySelectorAll('.mdc-select');
        for (const select of selects) {
            mdc.select.MDCSelect.attachTo(select);
        }

        const buttons = document.querySelectorAll('.mdc-button');
        for (const button of buttons) {
            mdc.ripple.MDCRipple.attachTo(button);
        }

        const lists = document.querySelectorAll('.mdc-list');
        const listItems = document.querySelectorAll('.mdc-list-item');
        for (const list of lists) {
            mdc.list.MDCList.attachTo(list);
            for (const listItem of listItems){
                mdc.ripple.MDCRipple.attachTo(listItem);
            }
        }
</script>
}